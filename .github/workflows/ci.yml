name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, closed]
    branches: [ main ]

env:
  BUILD_TYPE: Debug

# Updated to use latest compilers: GCC 15 and Clang 20
jobs:
  # Format Check with Clang 20
  format-check:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install clang-format 20
      run: |
        sudo apt-get update
        # Add LLVM repository for latest Clang
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" -y
        sudo apt-get update
        sudo apt-get install -y clang-format-20
        # Create symlink for compatibility with Makefile
        sudo ln -sf /usr/bin/clang-format-20 /usr/bin/clang-format

    - name: Check formatting
      run: make format-check

  # Linux GCC Build - uncomment when gcc15 is packaged nicely
  # so I don't have to build from source every CI/CD run
  # linux-gcc:
  #   runs-on: ubuntu-24.04
  #   needs: format-check

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install system dependencies
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y \
  #         build-essential \
  #         cmake \
  #         ninja-build \
  #         libboost-all-dev \
  #         libpq-dev \
  #         postgresql-client \
  #         docker-compose

  #   - name: Build and run tests
  #     run: make test

  # Linux Clang 20 Build with Coverage
  linux-clang:
    runs-on: ubuntu-24.04
    needs: format-check

    steps:
    - uses: actions/checkout@v4

    - name: Install Clang 20 and system dependencies
      run: |
        sudo apt-get update
        # Add LLVM repository for latest Clang
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" -y
        sudo apt-get update
        sudo apt-get install -y \
          clang-20 \
          libc++-20-dev \
          libc++abi-20-dev \
          cmake \
          ninja-build \
          clang-tidy-20 \
          clang-format-20 \
          lcov \
          gcovr \
          libboost-all-dev \
          libpq-dev \
          postgresql-client \
          docker-compose

    - name: Setup Clang 20 environment
      run: |
        echo "CC=clang-20" >> $GITHUB_ENV
        echo "CXX=clang++-20" >> $GITHUB_ENV

    - name: Verify Clang version
      run: |
        clang-20 --version
        clang++-20 --version

    - name: Build, run tests, and generate coverage report
      run: make coverage

    - name: Upload coverage to Codecov
      if: github.ref == 'refs/heads/main'
      uses: codecov/codecov-action@v4
      with:
        files: ./build/coverage/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # macOS Build and Test
  # macos:
  #   runs-on: macos-latest
  #   needs: format-check

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install dependencies
  #     run: |
  #       brew update
  #       brew install cmake ninja boost postgresql

  #   - name: Run tests
  #     run: make test

  # # Windows Build and Test
  # windows:
  #   runs-on: windows-latest
  #   needs: format-check

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install dependencies
  #     run: |
  #       # Install vcpkg for dependencies
  #       git clone https://github.com/Microsoft/vcpkg.git
  #       .\vcpkg\bootstrap-vcpkg.bat
  #       .\vcpkg\vcpkg install boost-pfr boost-describe boost-test libpq --triplet x64-windows

  #   - name: Setup MSVC environment
  #     uses: ilammy/msvc-dev-cmd@v1
  #     with:
  #       arch: x64

  #   - name: Build and run tests
  #     run: |
  #       cmake -B build -DCMAKE_BUILD_TYPE=Debug -DRELX_DEV_MODE=ON -DCMAKE_TOOLCHAIN_FILE=.\vcpkg\scripts\buildsystems\vcpkg.cmake
  #       cmake --build build --parallel
  #       ctest --test-dir build --output-on-failure
  #     shell: cmd

  # Clang-Tidy Check with Clang 20 (only when PR merges)
  clang-tidy:
    runs-on: ubuntu-24.04
    needs: format-check
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
    - uses: actions/checkout@v4

    - name: Install Clang 20 and system dependencies
      run: |
        sudo apt-get update
        # Add LLVM repository for latest Clang
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" -y
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-20 \
          libc++-20-dev \
          libc++abi-20-dev \
          clang-tidy-20 \
          cmake \
          ninja-build \
          libboost-all-dev \
          libpq-dev \
          postgresql-client \
          docker-compose

    - name: Setup Clang 20 environment
      run: |
        echo "CC=clang-20" >> $GITHUB_ENV
        echo "CXX=clang++-20" >> $GITHUB_ENV

    - name: Build (required for clang-tidy)
      run: make build

    - name: Run clang-tidy
      run: make tidy
