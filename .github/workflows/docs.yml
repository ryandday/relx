name: Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'include/**'
      - '.github/workflows/docs.yml'
      - 'Doxyfile'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'include/**'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Verify project structure
        run: |
          echo "=== Repository structure ==="
          find . -type f -name "*.hpp" -o -name "*.h" | head -10
          echo "=== Doxyfile exists ==="
          ls -la Doxyfile
          echo "=== Docs directory ==="
          ls -la docs/ || echo "No docs directory found"

      - name: Generate API Documentation
        run: |
          echo "Generating API documentation..."
          doxygen Doxyfile
          echo "API documentation generated successfully"

      - name: List generated API files
        run: |
          echo "=== Generated API documentation structure ==="
          find docs/api -type f | head -20

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare documentation site
        run: |
          # Create the site directory structure
          mkdir -p _site
          mkdir -p _site/api
          
          # Copy API documentation to the api subdirectory
          cp -r docs/api/html/* _site/api/
          
          # Extract version from CMakeLists.txt and update the landing page
          echo "Extracting version from CMakeLists.txt..."
          VERSION=$(grep -E '^project\(relx VERSION [0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt | sed -E 's/.*VERSION ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Found version: $VERSION"
          
          # Update the HTML with the extracted version
          sed "s/<span class=\"badge\">v[^<]*</<span class=\"badge\">v$VERSION</g" docs/index.html > _site/index.html
          
          echo "Documentation site prepared with version $VERSION"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 